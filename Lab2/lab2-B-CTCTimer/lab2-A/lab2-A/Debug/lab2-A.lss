
lab2-A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ac  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065d  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004a  00000000  00000000  0000174a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <small_delay>:
	TIFR1 = (1<<TOV1);
}
*/

void small_delay(int csec){ //CTC Delay, each iteration is 100 ms
	OCR0A = 255;
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	27 bd       	out	0x27, r18	; 39
	for (int i = 0; i<6*csec; i++)
  84:	9c 01       	movw	r18, r24
  86:	22 0f       	add	r18, r18
  88:	33 1f       	adc	r19, r19
  8a:	82 0f       	add	r24, r18
  8c:	93 1f       	adc	r25, r19
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	18 16       	cp	r1, r24
  94:	19 06       	cpc	r1, r25
  96:	7c f4       	brge	.+30     	; 0xb6 <small_delay+0x36>
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
	{
		TCNT0 = 0x00;
		TCCR0B = (1<<CS00)|(1<<CS02);
  9c:	55 e0       	ldi	r21, 0x05	; 5
		while ((TIFR0 & (1<<OCF0A))==0);
		TCNT0 = 0x00;
		TIFR0 = 1<<OCF0A;
  9e:	42 e0       	ldi	r20, 0x02	; 2

void small_delay(int csec){ //CTC Delay, each iteration is 100 ms
	OCR0A = 255;
	for (int i = 0; i<6*csec; i++)
	{
		TCNT0 = 0x00;
  a0:	16 bc       	out	0x26, r1	; 38
		TCCR0B = (1<<CS00)|(1<<CS02);
  a2:	55 bd       	out	0x25, r21	; 37
		while ((TIFR0 & (1<<OCF0A))==0);
  a4:	a9 9b       	sbis	0x15, 1	; 21
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <small_delay+0x24>
		TCNT0 = 0x00;
  a8:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 1<<OCF0A;
  aa:	45 bb       	out	0x15, r20	; 21
}
*/

void small_delay(int csec){ //CTC Delay, each iteration is 100 ms
	OCR0A = 255;
	for (int i = 0; i<6*csec; i++)
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
  b0:	28 17       	cp	r18, r24
  b2:	39 07       	cpc	r19, r25
  b4:	a9 f7       	brne	.-22     	; 0xa0 <small_delay+0x20>
  b6:	08 95       	ret

000000b8 <main>:
	}
}

int main(void)
{
    DDRB = 0xFF; 
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00110000;
  bc:	80 e3       	ldi	r24, 0x30	; 48
  be:	87 b9       	out	0x07, r24	; 7
    while (1) 
    {
		PORTC = (1<<4);
  c0:	c0 e1       	ldi	r28, 0x10	; 16
		PORTB = (1<<4)|(1<<0);
  c2:	0f 2e       	mov	r0, r31
  c4:	f1 e1       	ldi	r31, 0x11	; 17
  c6:	bf 2e       	mov	r11, r31
  c8:	f0 2d       	mov	r31, r0
		small_delay(50);
		PORTB = (1<<5)|(1<<0);		
  ca:	0f 2e       	mov	r0, r31
  cc:	f1 e2       	ldi	r31, 0x21	; 33
  ce:	cf 2e       	mov	r12, r31
  d0:	f0 2d       	mov	r31, r0
		small_delay(10);
		PORTB = (1<<3)|(1<<0);
  d2:	19 e0       	ldi	r17, 0x09	; 9
		small_delay(10);
		PORTB = (1<<3)|(1<<0)|(1<<2);
  d4:	0f 2e       	mov	r0, r31
  d6:	fd e0       	ldi	r31, 0x0D	; 13
  d8:	df 2e       	mov	r13, r31
  da:	f0 2d       	mov	r31, r0
		small_delay(10);
		PORTC = (1<<5);
  dc:	d0 e2       	ldi	r29, 0x20	; 32
		PORTB = (1<<3)|(1<<1);
  de:	0f 2e       	mov	r0, r31
  e0:	fa e0       	ldi	r31, 0x0A	; 10
  e2:	ef 2e       	mov	r14, r31
  e4:	f0 2d       	mov	r31, r0
		small_delay(50);

		//blinking part
		PORTC = 0x00;
		PORTB = (1<<3)|(1<<2);
  e6:	0f 2e       	mov	r0, r31
  e8:	fc e0       	ldi	r31, 0x0C	; 12
  ea:	ff 2e       	mov	r15, r31
  ec:	f0 2d       	mov	r31, r0
		PORTC = (1<<4);
		PORTB = (1<<3)|(1<<0);
		small_delay(10);

		PORTC = (1<<4);
		PORTB = (1<<3)|(1<<5)|(1<<0);
  ee:	09 e2       	ldi	r16, 0x29	; 41
{
    DDRB = 0xFF; 
	DDRC = 0b00110000;
    while (1) 
    {
		PORTC = (1<<4);
  f0:	c8 b9       	out	0x08, r28	; 8
		PORTB = (1<<4)|(1<<0);
  f2:	b5 b8       	out	0x05, r11	; 5
		small_delay(50);
  f4:	82 e3       	ldi	r24, 0x32	; 50
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 40 00 	call	0x80	; 0x80 <small_delay>
		PORTB = (1<<5)|(1<<0);		
  fc:	c5 b8       	out	0x05, r12	; 5
		small_delay(10);
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 40 00 	call	0x80	; 0x80 <small_delay>
		PORTB = (1<<3)|(1<<0);
 106:	15 b9       	out	0x05, r17	; 5
		small_delay(10);
 108:	8a e0       	ldi	r24, 0x0A	; 10
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 40 00 	call	0x80	; 0x80 <small_delay>
		PORTB = (1<<3)|(1<<0)|(1<<2);
 110:	d5 b8       	out	0x05, r13	; 5
		small_delay(10);
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 40 00 	call	0x80	; 0x80 <small_delay>
		PORTC = (1<<5);
 11a:	d8 b9       	out	0x08, r29	; 8
		PORTB = (1<<3)|(1<<1);
 11c:	e5 b8       	out	0x05, r14	; 5
		small_delay(50);
 11e:	82 e3       	ldi	r24, 0x32	; 50
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 40 00 	call	0x80	; 0x80 <small_delay>

		//blinking part
		PORTC = 0x00;
 126:	18 b8       	out	0x08, r1	; 8
		PORTB = (1<<3)|(1<<2);
 128:	f5 b8       	out	0x05, r15	; 5
		small_delay(3);
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 40 00 	call	0x80	; 0x80 <small_delay>
		PORTC = (1<<5);
 132:	d8 b9       	out	0x08, r29	; 8
		small_delay(3);
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 40 00 	call	0x80	; 0x80 <small_delay>
		PORTC = 0x00;
 13c:	18 b8       	out	0x08, r1	; 8
		small_delay(3);
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 40 00 	call	0x80	; 0x80 <small_delay>

		PORTC = (1<<4);
 146:	c8 b9       	out	0x08, r28	; 8
		PORTB = (1<<3)|(1<<0);
 148:	15 b9       	out	0x05, r17	; 5
		small_delay(10);
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 40 00 	call	0x80	; 0x80 <small_delay>

		PORTC = (1<<4);
 152:	c8 b9       	out	0x08, r28	; 8
		PORTB = (1<<3)|(1<<5)|(1<<0);
 154:	05 b9       	out	0x05, r16	; 5
		small_delay(10);
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 40 00 	call	0x80	; 0x80 <small_delay>
 15e:	c8 cf       	rjmp	.-112    	; 0xf0 <main+0x38>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
