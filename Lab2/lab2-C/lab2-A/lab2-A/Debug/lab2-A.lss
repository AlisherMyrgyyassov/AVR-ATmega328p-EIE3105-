
lab2-A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bd  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000859  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004a  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	}
}

int main(void)
{
    DDRB = 0xFF; 
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<0);
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	87 b9       	out	0x07, r24	; 7
	DDRD |= (0<<4);
  88:	8a b1       	in	r24, 0x0a	; 10
  8a:	8a b9       	out	0x0a, r24	; 10

	TCCR0B = (1<<CS00)|(1<<CS01)|(1<<CS02);
  8c:	87 e0       	ldi	r24, 0x07	; 7
  8e:	85 bd       	out	0x25, r24	; 37
	OCR0A = 2; // 012 -> overflow
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01)|(0<<WGM00);
  94:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0x00;
  96:	16 bc       	out	0x26, r1	; 38
    while (1) 
    {
		TCNT0 = 0x00;
		while((TIFR0 & (1<<OCF0A))==0);
		TIFR0 = (1<<OCF0A);
  98:	22 e0       	ldi	r18, 0x02	; 2
		PORTC = PORTC^(1<<PORTC0);		
  9a:	91 e0       	ldi	r25, 0x01	; 1
	OCR0A = 2; // 012 -> overflow
	TCCR0A = (1<<WGM01)|(0<<WGM00);
	TCNT0 = 0x00;
    while (1) 
    {
		TCNT0 = 0x00;
  9c:	16 bc       	out	0x26, r1	; 38
		while((TIFR0 & (1<<OCF0A))==0);
  9e:	a9 9b       	sbis	0x15, 1	; 21
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x1e>
		TIFR0 = (1<<OCF0A);
  a2:	25 bb       	out	0x15, r18	; 21
		PORTC = PORTC^(1<<PORTC0);		
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	89 27       	eor	r24, r25
  a8:	88 b9       	out	0x08, r24	; 8
    }
  aa:	f8 cf       	rjmp	.-16     	; 0x9c <main+0x1c>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
