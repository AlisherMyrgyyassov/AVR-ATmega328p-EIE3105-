
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ae  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061e  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000083  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delaysmh>:
 */ 

#include <avr/io.h>

void delaysmh (void) // not yet needed
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <delaysmh+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <delaysmh+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	unsigned k;
	unsigned j;
	for (k = 0; k <42150; k ++)
  8c:	1a 82       	std	Y+2, r1	; 0x02
  8e:	19 82       	std	Y+1, r1	; 0x01
  90:	11 c0       	rjmp	.+34     	; 0xb4 <delaysmh+0x34>
	{for (j = 0; j <20; j ++);}
  92:	1c 82       	std	Y+4, r1	; 0x04
  94:	1b 82       	std	Y+3, r1	; 0x03
  96:	05 c0       	rjmp	.+10     	; 0xa2 <delaysmh+0x22>
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	9c 81       	ldd	r25, Y+4	; 0x04
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	9c 83       	std	Y+4, r25	; 0x04
  a0:	8b 83       	std	Y+3, r24	; 0x03
  a2:	8b 81       	ldd	r24, Y+3	; 0x03
  a4:	9c 81       	ldd	r25, Y+4	; 0x04
  a6:	44 97       	sbiw	r24, 0x14	; 20
  a8:	b8 f3       	brcs	.-18     	; 0x98 <delaysmh+0x18>

void delaysmh (void) // not yet needed
{
	unsigned k;
	unsigned j;
	for (k = 0; k <42150; k ++)
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	9a 81       	ldd	r25, Y+2	; 0x02
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	89 83       	std	Y+1, r24	; 0x01
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	9a 81       	ldd	r25, Y+2	; 0x02
  b8:	86 3a       	cpi	r24, 0xA6	; 166
  ba:	94 4a       	sbci	r25, 0xA4	; 164
  bc:	50 f3       	brcs	.-44     	; 0x92 <delaysmh+0x12>
	{for (j = 0; j <20; j ++);}
}
  be:	00 00       	nop
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <main>:



int main(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRD = 0xFF;
  d6:	8a e2       	ldi	r24, 0x2A	; 42
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	DDRB = 0x01;
  e0:	84 e2       	ldi	r24, 0x24	; 36
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
    while (1) 
    {
		PORTD = 0x55;
  ea:	8b e2       	ldi	r24, 0x2B	; 43
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	25 e5       	ldi	r18, 0x55	; 85
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
		delaysmh();
  f4:	0e 94 40 00 	call	0x80	; 0x80 <delaysmh>
		PORTD = 0xAA;
  f8:	8b e2       	ldi	r24, 0x2B	; 43
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2a ea       	ldi	r18, 0xAA	; 170
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
		delaysmh();
 102:	0e 94 40 00 	call	0x80	; 0x80 <delaysmh>
    }
 106:	f1 cf       	rjmp	.-30     	; 0xea <main+0x1c>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
