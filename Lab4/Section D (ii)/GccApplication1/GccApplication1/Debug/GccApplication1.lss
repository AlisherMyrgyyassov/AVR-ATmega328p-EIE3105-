
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001dc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800114  00800114  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007cf  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d9  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e2  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003db  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000246  00000000  00000000  0000196b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001bb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


char UART_RxChar () {
	while(!(UCSR0A&(1<<RXC0)));
	return UDR0;
}
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2d 97       	sbiw	r28, 0x0d	; 13
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  cc:	8d e0       	ldi	r24, 0x0D	; 13
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x30>
  de:	fe 01       	movw	r30, r28
  e0:	31 96       	adiw	r30, 0x01	; 1
  e2:	ce 01       	movw	r24, r28
  e4:	0e 96       	adiw	r24, 0x0e	; 14
  e6:	a6 ec       	ldi	r26, 0xC6	; 198
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	21 91       	ld	r18, Z+
  ec:	2c 93       	st	X, r18
  ee:	e8 17       	cp	r30, r24
  f0:	f9 07       	cpc	r31, r25
  f2:	d9 f7       	brne	.-10     	; 0xea <main+0x44>
  f4:	e1 ec       	ldi	r30, 0xC1	; 193
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	80 83       	st	Z, r24
  fe:	78 94       	sei
 100:	ff cf       	rjmp	.-2      	; 0x100 <main+0x5a>

00000102 <UART_TxChar>:
 102:	e0 ec       	ldi	r30, 0xC0	; 192
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	90 81       	ld	r25, Z
 108:	95 ff       	sbrs	r25, 5
 10a:	fd cf       	rjmp	.-6      	; 0x106 <UART_TxChar+0x4>
 10c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 110:	08 95       	ret

00000112 <UART_TxString>:

void UART_TxString(char text[]) {
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	fc 01       	movw	r30, r24
	int i = 0;
	while (i<255) {
		if(text[i] == '\0') break; //if null character, breaks the loop
 11c:	80 81       	ld	r24, Z
 11e:	81 11       	cpse	r24, r1
 120:	0a c0       	rjmp	.+20     	; 0x136 <UART_TxString+0x24>
 122:	11 c0       	rjmp	.+34     	; 0x146 <UART_TxString+0x34>
 124:	89 91       	ld	r24, Y+
 126:	88 23       	and	r24, r24
 128:	71 f0       	breq	.+28     	; 0x146 <UART_TxString+0x34>
		UART_TxChar(text[i]);
 12a:	0e 94 81 00 	call	0x102	; 0x102 <UART_TxChar>
	return UDR0;
}

void UART_TxString(char text[]) {
	int i = 0;
	while (i<255) {
 12e:	0c 17       	cp	r16, r28
 130:	1d 07       	cpc	r17, r29
 132:	c1 f7       	brne	.-16     	; 0x124 <UART_TxString+0x12>
 134:	08 c0       	rjmp	.+16     	; 0x146 <UART_TxString+0x34>
 136:	8f 01       	movw	r16, r30
		if(text[i] == '\0') break; //if null character, breaks the loop
		UART_TxChar(text[i]);
 138:	0e 94 81 00 	call	0x102	; 0x102 <UART_TxChar>
 13c:	e8 01       	movw	r28, r16
 13e:	21 96       	adiw	r28, 0x01	; 1
 140:	01 50       	subi	r16, 0x01	; 1
 142:	1f 4f       	sbci	r17, 0xFF	; 255
 144:	ef cf       	rjmp	.-34     	; 0x124 <UART_TxString+0x12>
		i++;
	}
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	08 95       	ret

00000150 <__vector_18>:
int temp_flag;
char temp_char;
char comparisonChar = '\0';

ISR(USART_RX_vect) //when there is an input
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	// Section D (i)
	
	USART_ReceiveBuffer = UDR0; //input into udr0
 172:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 176:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	if (USART_ReceiveBuffer == 'H') {
 17a:	88 34       	cpi	r24, 0x48	; 72
 17c:	39 f4       	brne	.+14     	; 0x18c <__vector_18+0x3c>
		temp_flag = 1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <temp_flag+0x1>
 186:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <temp_flag>
 18a:	15 c0       	rjmp	.+42     	; 0x1b6 <__vector_18+0x66>
	}
	
	else if (USART_ReceiveBuffer == 'i' && (temp_flag == 1)) {
 18c:	89 36       	cpi	r24, 0x69	; 105
 18e:	79 f4       	brne	.+30     	; 0x1ae <__vector_18+0x5e>
 190:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <temp_flag>
 194:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <temp_flag+0x1>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	49 f4       	brne	.+18     	; 0x1ae <__vector_18+0x5e>
		temp_flag = 0;
 19c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <temp_flag+0x1>
 1a0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <temp_flag>
		UART_TxString("Bye!");
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 89 00 	call	0x112	; 0x112 <UART_TxString>
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <__vector_18+0x66>
	}
	else {
		temp_flag = 0;
 1ae:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <temp_flag+0x1>
 1b2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <temp_flag>
	{
		comparisonChar = UART_RxChar();
	}
	*/
	
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
