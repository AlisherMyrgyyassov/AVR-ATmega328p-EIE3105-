
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000800  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073c  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000317  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e9  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d3  00000000  00000000  000018ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_TxChar>:
	
}


void UART_TxChar(char data) { // send char from microcontroller
	while (!(UCSR0A&(1<<UDRE0))); //check UCSR0A register, and whenever UDRE0 is set, we get
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	95 ff       	sbrs	r25, 5
  88:	fd cf       	rjmp	.-6      	; 0x84 <UART_TxChar+0x4>
	UDR0 = data;				  //the serial value. UDR0 is the bit to be sent.
  8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  8e:	08 95       	ret

00000090 <UART_RxChar>:
}

char UART_RxChar () {
	while(!(UCSR0A&(1<<RXC0)));
  90:	e0 ec       	ldi	r30, 0xC0	; 192
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 23       	and	r24, r24
  98:	ec f7       	brge	.-6      	; 0x94 <UART_RxChar+0x4>
	return UDR0;
  9a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  9e:	08 95       	ret

000000a0 <main>:
char UART_RxChar ();		  //receive char to arduino
void UART_TxString(char text[]); // send strings

int main(void)
{
	UBRR0L = 103; //9600 baud rate (bps), see more at USART section, examples of UBRRn Settings
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = (1<<TXEN0)|(1<<RXEN0); // TXEN for sending from microcontroller, RXEN to receive to microcontroller
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01); //what is the size of data we want to send. By initializing these two bits, we set the 
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	while (1) 
	{
		while (1)
		{
			UART_TxChar('a');
			if(UCSR0A&(1<<RXC0))
  b2:	0f 2e       	mov	r0, r31
  b4:	f0 ec       	ldi	r31, 0xC0	; 192
  b6:	ef 2e       	mov	r14, r31
  b8:	f1 2c       	mov	r15, r1
  ba:	f0 2d       	mov	r31, r0
			{
				currentChar = UDR0;
  bc:	0f 2e       	mov	r0, r31
  be:	f6 ec       	ldi	r31, 0xC6	; 198
  c0:	cf 2e       	mov	r12, r31
  c2:	d1 2c       	mov	r13, r1
  c4:	f0 2d       	mov	r31, r0
	char comparisonChar;
	while (1) 
	{
		while (1)
		{
			UART_TxChar('a');
  c6:	81 e6       	ldi	r24, 0x61	; 97
  c8:	0e 94 40 00 	call	0x80	; 0x80 <UART_TxChar>
			if(UCSR0A&(1<<RXC0))
  cc:	f7 01       	movw	r30, r14
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	2c f4       	brge	.+10     	; 0xde <main+0x3e>
			{
				currentChar = UDR0;
  d4:	f6 01       	movw	r30, r12
  d6:	10 81       	ld	r17, Z
  d8:	ca e0       	ldi	r28, 0x0A	; 10
  da:	d0 e0       	ldi	r29, 0x00	; 0
  dc:	0a c0       	rjmp	.+20     	; 0xf2 <main+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	ff ef       	ldi	r31, 0xFF	; 255
  e0:	23 ec       	ldi	r18, 0xC3	; 195
  e2:	89 e0       	ldi	r24, 0x09	; 9
  e4:	f1 50       	subi	r31, 0x01	; 1
  e6:	20 40       	sbci	r18, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x44>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x4e>
  ee:	00 00       	nop
  f0:	ea cf       	rjmp	.-44     	; 0xc6 <main+0x26>
			}
			_delay_ms(200);
		}
		for (int i = 0; i < 10; i++)
		{
			UART_TxChar(currentChar);
  f2:	81 2f       	mov	r24, r17
  f4:	0e 94 40 00 	call	0x80	; 0x80 <UART_TxChar>
  f8:	21 97       	sbiw	r28, 0x01	; 1
				currentChar = UDR0;
				break;
			}
			_delay_ms(200);
		}
		for (int i = 0; i < 10; i++)
  fa:	d9 f7       	brne	.-10     	; 0xf2 <main+0x52>
		{
			UART_TxChar(currentChar);
		}
		while (1)
		{
			comparisonChar = UART_RxChar();
  fc:	0e 94 48 00 	call	0x90	; 0x90 <UART_RxChar>
			if (comparisonChar == currentChar) break;
 100:	18 13       	cpse	r17, r24
 102:	fc cf       	rjmp	.-8      	; 0xfc <main+0x5c>
 104:	e0 cf       	rjmp	.-64     	; 0xc6 <main+0x26>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
